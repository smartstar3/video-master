<?php

namespace MotionArray\Console\Commands\OneTime\Algolia;

use AlgoliaSearch\Client;
use Illuminate\Console\Command;
use MotionArray\Services\Algolia\AlgoliaConfigBuilder;
use SebastianBergmann\Diff\Differ;
use SebastianBergmann\Diff\Output\DiffOnlyOutputBuilder;

class CompareAlgoliaIndexConfig extends Command
{
    protected $signature = 'ma:compare-algolia-index-config                       
         {--config-env= : The environment config to use "prod" or "dev")}
         {--api-key= : Algolia api key}
         {--app-id= : Algolia app id to create the index in}
         {--index= : Name of the existing primary index to configure}';

    protected $description = 'Compares existing algolia index config with config generated by code';

    public function handle()
    {
        $primaryIndex = $this->option('index');
        $apiKey = $this->option('api-key');
        $appId = $this->option('app-id');

        $env = $this->option('config-env');
        if (!$this->validEnv($env)) {
            $this->error('config-env must be "prod" or "dev"');
            return;
        }

        $client = new Client($appId, $apiKey);

        $kickAssReplicaIndex = $primaryIndex . '_by_kickass';
        $downloadsReplicaIndex = $primaryIndex . '_by_downloads';

        $remoteConfig = [
            $primaryIndex => $client->initIndex($primaryIndex)->getSettings(),
            $kickAssReplicaIndex => $client->initIndex($kickAssReplicaIndex)->getSettings(),
            $downloadsReplicaIndex => $client->initIndex($downloadsReplicaIndex)->getSettings(),
        ];

        /** @var AlgoliaConfigBuilder $builder */
        $builder = app(AlgoliaConfigBuilder::class);

        if ($env === 'dev') {
            $localConfig = $builder->devSettings($primaryIndex);
        } else {
            $localConfig = $builder->prodSettings($primaryIndex);
        }

        $localConfig[$kickAssReplicaIndex]['primary'] = $primaryIndex;
        $localConfig[$downloadsReplicaIndex]['primary'] = $primaryIndex;

        $diffHeader = "--- Remote\n+++ Local\n";

        $localConfig = $this->normalize($localConfig);
        $remoteConfig = $this->normalize($remoteConfig);

        $buffer = new DiffOnlyOutputBuilder($diffHeader);
        $differ = new Differ($buffer);

        foreach ($remoteConfig as $indexKey => $remoteItem) {
            $this->comment('checking index config: ' . $indexKey);

            $localItem = $localConfig[$indexKey];

            foreach ($remoteItem as $key => $remoteValue) {

                $missingKey = false;
                if (isset($localItem[$key])) {
                    $localValue = $localItem[$key];
                } else {
                    $missingKey = true;
                    $localValue = null;
                }

                $diff = $differ->diff($remoteValue, $localValue);

                if ($diff !== $diffHeader) {
                    $this->info($key);
                    $this->comment($diff);

                    $this->info('local');
                    dump([$key => $localValue]);
                    $this->info('remote');
                    dump([$key => $remoteValue]);

                    $this->info('');
                    if ($missingKey) {
                        $this->warn('key missing in local config: ' . $key);
                    }
                }
            }

            $this->info('completed checking:    ' . $indexKey . PHP_EOL);
        }
    }

    protected function validEnv($env)
    {
        $validEnvs = ['prod', 'dev'];
        return in_array($env, $validEnvs);
    }

    protected function normalize(array $config)
    {
        foreach ($config as $index => $item) {
            $config[$index] = $this->normalizeIndexConfig($item);
        }

        return $config;
    }

    protected function normalizeIndexConfig(array $indexConfig)
    {
        // local config and remote config use different keys for this
        if (isset($indexConfig['attributesToIndex'])) {
            $indexConfig['searchableAttributes'] = $indexConfig['attributesToIndex'];
            unset($indexConfig['attributesToIndex']);
        }

        if (isset($indexConfig['replicas'])) {
            sort($indexConfig['replicas']);
        }
        if (isset($indexConfig['attributesForFaceting'])) {
            sort($indexConfig['attributesForFaceting']);
        }

        if (isset($indexConfig['attributesToRetrieve'])) {
            sort($indexConfig['attributesToRetrieve']);
        }

        return $indexConfig;
    }
}
